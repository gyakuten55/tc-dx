# .exe化の手順と今後のアップデート方法

## アプリケーションの.exe化の方法

1. **前提条件の確認**
   - Pythonがインストールされていること
   - `requirements.txt`に記載されているパッケージがインストールされていること
   - 特に`pyinstaller`パッケージが必要です

2. **リソースファイルの準備**
   - `resources`フォルダに必要なファイルを配置:
     - `icon.ico`: アプリケーションのアイコン
     - `logo.png`: アプリケーションのロゴ画像（200×200px程度）
     - `splash.png`: スプラッシュ画面用画像（600×400px程度）

3. **.exe化の実行**
   - プロジェクトのルートディレクトリにある`build_exe.bat`をダブルクリック
   - または、コマンドプロンプトで以下を実行:
     ```
     build_exe.bat
     ```
   - バッチファイルは以下の処理を行います:
     1. リソースディレクトリの確認
     2. 必要なパッケージのインストール
     3. PyInstallerによるexeファイルのビルド

4. **生成されたexeの確認**
   - ビルドが完了すると`dist`フォルダに「TC業務管理システム.exe」が生成されます
   - このexeファイルは単独で実行可能です（必要なファイルはすべて内包）

## アップデート後の.exe化の手順

1. **コードの修正**
   - 必要な機能追加や修正を行う
   - 問題なく動作することをPython環境で確認する

2. **バージョン情報の更新（推奨）**
   - `main_window.py`内のバージョン情報を更新:
     ```python
     # 「Ver 1.0.0」の部分を新しいバージョンに変更
     version_label = QLabel("Ver 1.0.1")  # 例: 1.0.0 → 1.0.1
     ```

3. **.exe再ビルド**
   - 上記の「.exe化の実行」と同じ手順で`build_exe.bat`を実行
   - 古いexeは上書きされます

4. **配布**
   - `dist`フォルダ内の新しいexeファイルを配布
   - ユーザーは古いバージョンを新しいバージョンに置き換えるだけで更新完了

## トラブルシューティング

1. **ビルドエラーが発生した場合**
   - コマンドプロンプトで`build_exe.bat`を実行し、エラーメッセージを確認
   - 必要なパッケージが不足している場合は手動でインストール:
     ```
     pip install パッケージ名
     ```

2. **実行時エラーが発生した場合**
   - コマンドプロンプトからexeを実行し、エラーメッセージを確認:
     ```
     dist\TC業務管理システム.exe
     ```
   - データベースファイルなど外部依存ファイルがあれば、配布パッケージに含める

3. **アイコンが反映されない場合**
   - `resources/icon.ico`が正しい形式であることを確認
   - 必要に応じて画像から.ico形式への変換ツールを使用

## 高度なカスタマイズ（オプション）

より詳細な設定が必要な場合は、`build_exe.bat`ファイルを編集して以下のような設定を変更できます:

- アプリケーション名の変更: `--name "新しい名前"`
- 追加ファイルの指定: `--add-data "ファイルパス;配置先"`
- その他のPyInstallerオプション: PyInstallerのドキュメントを参照

以上の手順に従うことで、アプリケーションの.exe化と今後のアップデート時の.exe再作成が行えます。 